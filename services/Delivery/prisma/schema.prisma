generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/delivery-client"
}

datasource deliveryDb {
  provider = "postgresql"
  url      = env("DELIVERY_DATABASE_URL")
}

model campaign_delivery_summary {
  campaign_id     String    @id @deliveryDb.Uuid
  total_messages  Int?      @default(0)
  pending_count   Int?      @default(0)
  sent_count      Int?      @default(0)
  delivered_count Int?      @default(0)
  failed_count    Int?      @default(0)
  last_updated    DateTime? @default(now()) @deliveryDb.Timestamp(6)
}

model communication_log {
  communication_id  String              @id @default(dbgenerated("gen_random_uuid()")) @deliveryDb.Uuid
  campaign_id       String              @deliveryDb.Uuid
  customer_id       String              @deliveryDb.Uuid
  customer_email    String              @deliveryDb.VarChar(255)
  customer_name     String?             @deliveryDb.VarChar(255)
  message_text      String
  status            String?             @default("PENDING") @deliveryDb.VarChar(20)
  attempts          Int?                @default(0)
  max_attempts      Int?                @default(3)
  vendor_ref        String?             @deliveryDb.VarChar(255)
  created_at        DateTime?           @default(now()) @deliveryDb.Timestamp(6)
  last_attempt_at   DateTime?           @deliveryDb.Timestamp(6)
  delivered_at      DateTime?           @deliveryDb.Timestamp(6)
  delivery_receipts delivery_receipts[]
}

model delivery_receipts {
  receipt_id               String                     @id @default(dbgenerated("gen_random_uuid()")) @deliveryDb.Uuid
  communication_id         String                     @deliveryDb.Uuid
  vendor_ref               String?                    @deliveryDb.VarChar(255)
  receipt_status           String                     @deliveryDb.VarChar(20)
  failure_reason           String?
  received_at              DateTime?                  @default(now()) @deliveryDb.Timestamp(6)
  processed                Boolean?                   @default(false)
  communication_log        communication_log          @relation(fields: [communication_id], references: [communication_id], onDelete: NoAction, onUpdate: NoAction)
  receipt_processing_queue receipt_processing_queue[]
}

model receipt_processing_queue {
  id                Int               @id @default(autoincrement())
  receipt_id        String            @deliveryDb.Uuid
  status            String?           @default("PENDING") @deliveryDb.VarChar(20)
  created_at        DateTime?         @default(now()) @deliveryDb.Timestamp(6)
  processed_at      DateTime?         @deliveryDb.Timestamp(6)
  delivery_receipts delivery_receipts @relation(fields: [receipt_id], references: [receipt_id], onDelete: NoAction, onUpdate: NoAction)
}
